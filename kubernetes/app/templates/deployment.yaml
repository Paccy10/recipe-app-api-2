apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  replicas: {{ .Values.microservice.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.microservice.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ .Values.microservice.name }}
    spec:
      containers:
      - name: {{ .Values.microservice.name }}
        image: {{ .Values.workload.image }}
        imagePullPolicy: Never
        # livenessProbe:
        #   httpGet:
        #     path: /api/health/
        #     port: {{ .Values.workload.port }}
        #     httpHeaders:
        #     - name: Host
        #       value: localhost
        #   initialDelaySeconds: {{ .Values.workload.livenessDelay }}
        #   periodSeconds: 5
        # readinessProbe:
        #   httpGet:
        #     path: /api/health/
        #     port: {{ .Values.workload.port }}
        #     httpHeaders:
        #     - name: Host
        #       value: localhost
        #   periodSeconds: 5
        envFrom:
          - configMapRef:
              name: {{ printf "%s-config" .Values.microservice.name }}
          - secretRef:
              name: {{ printf "%s-secret" .Values.microservice.name }}
        resources:
          requests:
            memory: {{ .Values.workload.resources.requests.memory }}
            cpu: {{ .Values.workload.resources.requests.cpu }}
          limits:
            memory: {{ .Values.workload.resources.limits.memory }}
            cpu: {{ .Values.workload.resources.limits.cpu }}
        ports:
          - name: http
            containerPort: {{ .Values.workload.port }}
